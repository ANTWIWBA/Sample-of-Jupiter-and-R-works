{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Topic: Data Reduction and Principal Component Analysis method"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<img src=\"MIT-Coding-Brain-01-press_0.jpg\" style=\"width:1000px; height:500px\"/>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Dimensionality Reduction \n",
    "- A data has dimensionality when there is a certain amount of x data set available\n",
    "    <img src=\"sampledatainteractive01.png\" style=\"width:500px; height:400px\"/>\n",
    "- when we have higher dimensional data, it helps us lower dimension data by dropping the least important variables while ensuring important information is not lost\n",
    "- Help us get rid of unnecessary highly correlated attributes\n",
    "\n",
    "<b>They are many different methods when doing Reduction:</b>\n",
    "\n",
    "- Example of linear dimensional reduction attribution methods\n",
    "    - Principal Component Analysis (PCA)\n",
    "    - Factor Analysis (FA)\n",
    "    \n",
    "- Examples for non-linear dimensional reduction\n",
    "    - Multidimensional scaling (MDS)\n",
    "    - locally Linear Embedding (LLE)\n",
    "        \n",
    "- I will be focusing on Principal Component Analysis since it is commonly used \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Principal Component Analysis (PCA)\n",
    "\n",
    "- It is a unsupervised and non parametric method that transform a dataset with higher number of variables into a small set of uncorrelated variables known as principle components.\n",
    "- it a common technique for probability and statistics\n",
    "- used for big data with statistical distribution and want to uncover low dimensiional patterns to build models. \n",
    "- statistical interpretation of SVD\n",
    "\n",
    "- So imagine you have a data set graphed into a scatter plot, PCA find the best fit line and then minimize the orthogonal distance (sum of square distance) between the data set and the line of best fit.\n",
    "    <img src=\"pca_figure1.jpg\" style=\"width:500px; height:500px\"/>\n",
    "    \n",
    "- the best fit line tells the direction of the maximum variance which is a result of the first Principal component and it will be the new axis. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Steps for Computing PCA"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Data Scaling\n",
    "    - we transform our data to a certain scaling to eliminates bias. (In other words normalize your data)\n",
    "    - Types of scaling\n",
    "        - Stardard Scaler: standardization using the z-score which show us a normal distribution. \n",
    "        <img src=\"zscore-56a8fa785f9b58b7d0f6e87b.gif\" style=\"width:100px; height:100px\"/>\n",
    "        - Minimum/Maximum scaler: sentitive to outliers since it scales data into [0,1]\n",
    "\n",
    "\n",
    "2. Covariance Matrix of Scaled data \n",
    "    - gives us the direction of the linear relationship between two variables\n",
    "    - makes it easy to plot the data set and see their relationship\n",
    "    - Propulation: $cov(x,y) =\\frac{\\sum (x_1- \\bar x)* (y_i- \\bar y)}{N}$\n",
    "    - Sample: $cov(x,y) =\\frac{\\sum (x_1- \\bar x)* (y_i- \\bar y)}{(N-1)}$\n",
    "    - coveriance matrix is square matrix and N dimensional dataset will give \"N*N\" covariance matrix\n",
    "        <img src=\"8xabz.png\" style=\"width:500px; height:500px\"/>\n",
    "\n",
    "\n",
    "3. Eigen Decomposition of Covariance matrix\n",
    "    - Eigen decoposition of covariance matrix gives you the eigenvectors and corresponding eigenvalues. \n",
    "    - a square matrix of order N gives N eigenvectors with their corresponding N eigenvalues. \n",
    "    - eigenvector tells us the direction of the spread of the data and the direction remains unchanged. \n",
    "    - eigenvalues will tells the magnitude of the spread of the direction. \n",
    "    \n",
    "    \n",
    "4. Sort the eigenvectors and choose the top K best Principle composition with the maximum eigenvalues\n",
    "    - Principal Components (PC)  are the eigenvectors of the covariance matrix (orthogonal)  and by sorting the eigenvectos in the order of their eigenvalues gives you the order of significance of the Pricipal Component. \n",
    "    \n",
    "    \n",
    "5. Construct a projection matrix using \"k\" best eigenvectors\n",
    "    - \"k\" is the new demensional of the trasformed data into new attributes and the number of PC we consider to contruct a new feature space\n",
    "    - Projection matrix selects the top \"K\" Principal Matrix (in other words I take my slected eigenventors with eigenvalues and then pick my top \"k\" to do the projection matrix).\n",
    "    - so it depicts the new cordinates for our feature space using the original data.\n",
    "    \n",
    "6. Transfer our originial data to new feature space\n",
    "    - multiply feature matrix with the top k eigenvectors (projection matrix) and we will get the transformed data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Numerical Computation of Principal Component Analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "# you import the thing you will needing\n",
    "\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "import seaborn as sn\n",
    "\n",
    "%matplotlib inline\n",
    "\n",
    "import plotly.io as pio\n",
    "pio.renderers.default = 'browser'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Import data\n",
    "- I will be using data collected from the Federal Reserve Economic data on Alabama: https://fred.stlouisfed.org/\n",
    "- The variables are home ownership (ALHOWN), unemploment rate (ALUR), real median family Income (ALINCOME), all transactional price index (ALHPINDEX) and resident population (ALPOP), population crime rate (PCRIMER) from year 1988 to 2019."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALHOWN</th>\n",
       "      <th>ALUR</th>\n",
       "      <th>ALINCOME</th>\n",
       "      <th>ALPERMITS</th>\n",
       "      <th>ALHPINDEX</th>\n",
       "      <th>ALPOP</th>\n",
       "      <th>PCRIMER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>66.5</td>\n",
       "      <td>7.2</td>\n",
       "      <td>41563</td>\n",
       "      <td>12324.21325</td>\n",
       "      <td>142.39</td>\n",
       "      <td>4023.844</td>\n",
       "      <td>4003.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67.6</td>\n",
       "      <td>7.0</td>\n",
       "      <td>42489</td>\n",
       "      <td>11226.16160</td>\n",
       "      <td>144.33</td>\n",
       "      <td>4030.222</td>\n",
       "      <td>4037.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>68.4</td>\n",
       "      <td>6.8</td>\n",
       "      <td>44436</td>\n",
       "      <td>12052.50913</td>\n",
       "      <td>146.87</td>\n",
       "      <td>4048.508</td>\n",
       "      <td>4206.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>69.9</td>\n",
       "      <td>7.4</td>\n",
       "      <td>44692</td>\n",
       "      <td>10449.67977</td>\n",
       "      <td>151.52</td>\n",
       "      <td>4091.025</td>\n",
       "      <td>4521.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>70.3</td>\n",
       "      <td>7.6</td>\n",
       "      <td>46226</td>\n",
       "      <td>13087.10690</td>\n",
       "      <td>157.58</td>\n",
       "      <td>4139.269</td>\n",
       "      <td>4396.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>70.2</td>\n",
       "      <td>7.4</td>\n",
       "      <td>43821</td>\n",
       "      <td>14755.56720</td>\n",
       "      <td>164.31</td>\n",
       "      <td>4193.114</td>\n",
       "      <td>4098.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>68.5</td>\n",
       "      <td>6.2</td>\n",
       "      <td>46542</td>\n",
       "      <td>18560.15763</td>\n",
       "      <td>170.28</td>\n",
       "      <td>4232.965</td>\n",
       "      <td>4219.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>70.1</td>\n",
       "      <td>6.0</td>\n",
       "      <td>43434</td>\n",
       "      <td>19708.83613</td>\n",
       "      <td>177.13</td>\n",
       "      <td>4262.731</td>\n",
       "      <td>4215.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>71.0</td>\n",
       "      <td>5.2</td>\n",
       "      <td>49324</td>\n",
       "      <td>20767.76985</td>\n",
       "      <td>184.31</td>\n",
       "      <td>4290.403</td>\n",
       "      <td>4254.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>71.3</td>\n",
       "      <td>5.0</td>\n",
       "      <td>50889</td>\n",
       "      <td>18402.28028</td>\n",
       "      <td>191.20</td>\n",
       "      <td>4320.281</td>\n",
       "      <td>4325.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>72.9</td>\n",
       "      <td>4.4</td>\n",
       "      <td>57011</td>\n",
       "      <td>20040.11949</td>\n",
       "      <td>200.96</td>\n",
       "      <td>4351.037</td>\n",
       "      <td>4085.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>74.8</td>\n",
       "      <td>4.7</td>\n",
       "      <td>55799</td>\n",
       "      <td>19525.62245</td>\n",
       "      <td>206.15</td>\n",
       "      <td>4369.862</td>\n",
       "      <td>3922.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>73.2</td>\n",
       "      <td>4.6</td>\n",
       "      <td>52737</td>\n",
       "      <td>19200.14861</td>\n",
       "      <td>211.30</td>\n",
       "      <td>4452.173</td>\n",
       "      <td>4059.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>73.2</td>\n",
       "      <td>5.1</td>\n",
       "      <td>50895</td>\n",
       "      <td>18943.21227</td>\n",
       "      <td>222.98</td>\n",
       "      <td>4467.634</td>\n",
       "      <td>3876.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>73.7</td>\n",
       "      <td>5.9</td>\n",
       "      <td>53586</td>\n",
       "      <td>22175.44881</td>\n",
       "      <td>229.55</td>\n",
       "      <td>4480.089</td>\n",
       "      <td>4027.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>76.2</td>\n",
       "      <td>6.0</td>\n",
       "      <td>51912</td>\n",
       "      <td>24531.15064</td>\n",
       "      <td>238.66</td>\n",
       "      <td>4503.491</td>\n",
       "      <td>4046.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>78.0</td>\n",
       "      <td>5.7</td>\n",
       "      <td>49697</td>\n",
       "      <td>29025.20659</td>\n",
       "      <td>247.79</td>\n",
       "      <td>4530.729</td>\n",
       "      <td>4029.3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>76.6</td>\n",
       "      <td>4.5</td>\n",
       "      <td>48752</td>\n",
       "      <td>30702.09329</td>\n",
       "      <td>265.27</td>\n",
       "      <td>4569.805</td>\n",
       "      <td>3900.2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>74.2</td>\n",
       "      <td>4.1</td>\n",
       "      <td>48241</td>\n",
       "      <td>30115.83004</td>\n",
       "      <td>286.22</td>\n",
       "      <td>4628.981</td>\n",
       "      <td>3941.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>73.3</td>\n",
       "      <td>4.0</td>\n",
       "      <td>52176</td>\n",
       "      <td>23704.13707</td>\n",
       "      <td>299.79</td>\n",
       "      <td>4672.840</td>\n",
       "      <td>3977.7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>73.0</td>\n",
       "      <td>5.7</td>\n",
       "      <td>52941</td>\n",
       "      <td>15111.15966</td>\n",
       "      <td>303.13</td>\n",
       "      <td>4718.206</td>\n",
       "      <td>4084.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>74.1</td>\n",
       "      <td>11.0</td>\n",
       "      <td>47755</td>\n",
       "      <td>12013.84250</td>\n",
       "      <td>298.73</td>\n",
       "      <td>4757.938</td>\n",
       "      <td>3780.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>73.2</td>\n",
       "      <td>10.5</td>\n",
       "      <td>48100</td>\n",
       "      <td>10406.86036</td>\n",
       "      <td>287.52</td>\n",
       "      <td>4785.514</td>\n",
       "      <td>3528.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>72.9</td>\n",
       "      <td>9.6</td>\n",
       "      <td>48518</td>\n",
       "      <td>10340.64586</td>\n",
       "      <td>277.79</td>\n",
       "      <td>4799.642</td>\n",
       "      <td>3605.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>71.9</td>\n",
       "      <td>8.0</td>\n",
       "      <td>48487</td>\n",
       "      <td>11185.85477</td>\n",
       "      <td>276.42</td>\n",
       "      <td>4816.632</td>\n",
       "      <td>3505.5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>72.7</td>\n",
       "      <td>7.2</td>\n",
       "      <td>52017</td>\n",
       "      <td>10955.85370</td>\n",
       "      <td>274.27</td>\n",
       "      <td>4831.586</td>\n",
       "      <td>3347.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>72.1</td>\n",
       "      <td>6.8</td>\n",
       "      <td>45701</td>\n",
       "      <td>12809.16538</td>\n",
       "      <td>277.89</td>\n",
       "      <td>4843.737</td>\n",
       "      <td>3179.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>70.0</td>\n",
       "      <td>6.1</td>\n",
       "      <td>48030</td>\n",
       "      <td>13935.68699</td>\n",
       "      <td>285.74</td>\n",
       "      <td>4854.803</td>\n",
       "      <td>2982.9</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>69.7</td>\n",
       "      <td>5.8</td>\n",
       "      <td>50308</td>\n",
       "      <td>14129.47725</td>\n",
       "      <td>294.27</td>\n",
       "      <td>4866.824</td>\n",
       "      <td>2947.4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>70.0</td>\n",
       "      <td>4.4</td>\n",
       "      <td>53049</td>\n",
       "      <td>14572.22064</td>\n",
       "      <td>303.76</td>\n",
       "      <td>4877.989</td>\n",
       "      <td>2949.1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>70.3</td>\n",
       "      <td>3.9</td>\n",
       "      <td>50841</td>\n",
       "      <td>14520.24071</td>\n",
       "      <td>317.02</td>\n",
       "      <td>4891.628</td>\n",
       "      <td>2837.8</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>70.7</td>\n",
       "      <td>3.0</td>\n",
       "      <td>56200</td>\n",
       "      <td>16186.66500</td>\n",
       "      <td>334.11</td>\n",
       "      <td>4907.965</td>\n",
       "      <td>2674.4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ALHOWN  ALUR  ALINCOME    ALPERMITS  ALHPINDEX     ALPOP  PCRIMER\n",
       "0     66.5   7.2     41563  12324.21325     142.39  4023.844   4003.1\n",
       "1     67.6   7.0     42489  11226.16160     144.33  4030.222   4037.0\n",
       "2     68.4   6.8     44436  12052.50913     146.87  4048.508   4206.7\n",
       "3     69.9   7.4     44692  10449.67977     151.52  4091.025   4521.4\n",
       "4     70.3   7.6     46226  13087.10690     157.58  4139.269   4396.4\n",
       "5     70.2   7.4     43821  14755.56720     164.31  4193.114   4098.4\n",
       "6     68.5   6.2     46542  18560.15763     170.28  4232.965   4219.4\n",
       "7     70.1   6.0     43434  19708.83613     177.13  4262.731   4215.7\n",
       "8     71.0   5.2     49324  20767.76985     184.31  4290.403   4254.7\n",
       "9     71.3   5.0     50889  18402.28028     191.20  4320.281   4325.3\n",
       "10    72.9   4.4     57011  20040.11949     200.96  4351.037   4085.0\n",
       "11    74.8   4.7     55799  19525.62245     206.15  4369.862   3922.3\n",
       "12    73.2   4.6     52737  19200.14861     211.30  4452.173   4059.7\n",
       "13    73.2   5.1     50895  18943.21227     222.98  4467.634   3876.8\n",
       "14    73.7   5.9     53586  22175.44881     229.55  4480.089   4027.8\n",
       "15    76.2   6.0     51912  24531.15064     238.66  4503.491   4046.4\n",
       "16    78.0   5.7     49697  29025.20659     247.79  4530.729   4029.3\n",
       "17    76.6   4.5     48752  30702.09329     265.27  4569.805   3900.2\n",
       "18    74.2   4.1     48241  30115.83004     286.22  4628.981   3941.0\n",
       "19    73.3   4.0     52176  23704.13707     299.79  4672.840   3977.7\n",
       "20    73.0   5.7     52941  15111.15966     303.13  4718.206   4084.5\n",
       "21    74.1  11.0     47755  12013.84250     298.73  4757.938   3780.4\n",
       "22    73.2  10.5     48100  10406.86036     287.52  4785.514   3528.0\n",
       "23    72.9   9.6     48518  10340.64586     277.79  4799.642   3605.4\n",
       "24    71.9   8.0     48487  11185.85477     276.42  4816.632   3505.5\n",
       "25    72.7   7.2     52017  10955.85370     274.27  4831.586   3347.9\n",
       "26    72.1   6.8     45701  12809.16538     277.89  4843.737   3179.4\n",
       "27    70.0   6.1     48030  13935.68699     285.74  4854.803   2982.9\n",
       "28    69.7   5.8     50308  14129.47725     294.27  4866.824   2947.4\n",
       "29    70.0   4.4     53049  14572.22064     303.76  4877.989   2949.1\n",
       "30    70.3   3.9     50841  14520.24071     317.02  4891.628   2837.8\n",
       "31    70.7   3.0     56200  16186.66500     334.11  4907.965   2674.4"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "alabama_df = pd.read_csv('Math_Alabama_FRED_HW.csv')\n",
    "alabama_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Visual Representation of the Dataset\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "# making a scatterplot using the first 3 variables on an x,y,z plane\n",
    "alabama_df = pd.read_csv('Math_Alabama_FRED_HW.csv')\n",
    "fig = px.scatter_3d(alabama_df, x='ALHOWN',y='ALUR', z='ALINCOME', color='PCRIMER', labels={\"class\":\"PCRIMER\"})\n",
    "fig.update_traces(marker=dict(size=13, line=dict(width=1, color='green')), selector=dict(mode='markers'))\n",
    "fig.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.  Standard Scaling / Z-score Nomalization \n",
    "- using this method because my data set has different ranges and also to help eliminate any bias"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALHOWN</th>\n",
       "      <th>ALUR</th>\n",
       "      <th>ALINCOME</th>\n",
       "      <th>ALPERMITS</th>\n",
       "      <th>ALHPINDEX</th>\n",
       "      <th>ALPOP</th>\n",
       "      <th>PCRIMER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-2.095</td>\n",
       "      <td>0.572</td>\n",
       "      <td>-1.963</td>\n",
       "      <td>-0.820</td>\n",
       "      <td>-1.599</td>\n",
       "      <td>-1.716</td>\n",
       "      <td>0.418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-1.667</td>\n",
       "      <td>0.463</td>\n",
       "      <td>-1.726</td>\n",
       "      <td>-1.011</td>\n",
       "      <td>-1.567</td>\n",
       "      <td>-1.693</td>\n",
       "      <td>0.487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>-1.357</td>\n",
       "      <td>0.354</td>\n",
       "      <td>-1.230</td>\n",
       "      <td>-0.867</td>\n",
       "      <td>-1.523</td>\n",
       "      <td>-1.630</td>\n",
       "      <td>0.835</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>-0.774</td>\n",
       "      <td>0.681</td>\n",
       "      <td>-1.164</td>\n",
       "      <td>-1.146</td>\n",
       "      <td>-1.444</td>\n",
       "      <td>-1.483</td>\n",
       "      <td>1.479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>-0.618</td>\n",
       "      <td>0.790</td>\n",
       "      <td>-0.773</td>\n",
       "      <td>-0.688</td>\n",
       "      <td>-1.341</td>\n",
       "      <td>-1.316</td>\n",
       "      <td>1.223</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>-0.657</td>\n",
       "      <td>0.681</td>\n",
       "      <td>-1.387</td>\n",
       "      <td>-0.398</td>\n",
       "      <td>-1.227</td>\n",
       "      <td>-1.129</td>\n",
       "      <td>0.613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>-1.318</td>\n",
       "      <td>0.027</td>\n",
       "      <td>-0.692</td>\n",
       "      <td>0.263</td>\n",
       "      <td>-1.126</td>\n",
       "      <td>-0.991</td>\n",
       "      <td>0.861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>-0.696</td>\n",
       "      <td>-0.082</td>\n",
       "      <td>-1.485</td>\n",
       "      <td>0.463</td>\n",
       "      <td>-1.009</td>\n",
       "      <td>-0.888</td>\n",
       "      <td>0.853</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>-0.346</td>\n",
       "      <td>-0.517</td>\n",
       "      <td>0.018</td>\n",
       "      <td>0.647</td>\n",
       "      <td>-0.887</td>\n",
       "      <td>-0.792</td>\n",
       "      <td>0.933</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>-0.230</td>\n",
       "      <td>-0.626</td>\n",
       "      <td>0.417</td>\n",
       "      <td>0.236</td>\n",
       "      <td>-0.770</td>\n",
       "      <td>-0.689</td>\n",
       "      <td>1.077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0.392</td>\n",
       "      <td>-0.953</td>\n",
       "      <td>1.979</td>\n",
       "      <td>0.520</td>\n",
       "      <td>-0.604</td>\n",
       "      <td>-0.582</td>\n",
       "      <td>0.586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1.131</td>\n",
       "      <td>-0.790</td>\n",
       "      <td>1.670</td>\n",
       "      <td>0.431</td>\n",
       "      <td>-0.516</td>\n",
       "      <td>-0.517</td>\n",
       "      <td>0.252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0.509</td>\n",
       "      <td>-0.844</td>\n",
       "      <td>0.888</td>\n",
       "      <td>0.374</td>\n",
       "      <td>-0.429</td>\n",
       "      <td>-0.232</td>\n",
       "      <td>0.534</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0.509</td>\n",
       "      <td>-0.572</td>\n",
       "      <td>0.418</td>\n",
       "      <td>0.330</td>\n",
       "      <td>-0.230</td>\n",
       "      <td>-0.178</td>\n",
       "      <td>0.159</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0.703</td>\n",
       "      <td>-0.136</td>\n",
       "      <td>1.105</td>\n",
       "      <td>0.891</td>\n",
       "      <td>-0.119</td>\n",
       "      <td>-0.135</td>\n",
       "      <td>0.468</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1.675</td>\n",
       "      <td>-0.082</td>\n",
       "      <td>0.678</td>\n",
       "      <td>1.300</td>\n",
       "      <td>0.036</td>\n",
       "      <td>-0.054</td>\n",
       "      <td>0.507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>2.374</td>\n",
       "      <td>-0.245</td>\n",
       "      <td>0.113</td>\n",
       "      <td>2.081</td>\n",
       "      <td>0.191</td>\n",
       "      <td>0.040</td>\n",
       "      <td>0.472</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1.830</td>\n",
       "      <td>-0.899</td>\n",
       "      <td>-0.128</td>\n",
       "      <td>2.372</td>\n",
       "      <td>0.488</td>\n",
       "      <td>0.176</td>\n",
       "      <td>0.207</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0.898</td>\n",
       "      <td>-1.116</td>\n",
       "      <td>-0.259</td>\n",
       "      <td>2.271</td>\n",
       "      <td>0.844</td>\n",
       "      <td>0.381</td>\n",
       "      <td>0.291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0.548</td>\n",
       "      <td>-1.171</td>\n",
       "      <td>0.745</td>\n",
       "      <td>1.157</td>\n",
       "      <td>1.075</td>\n",
       "      <td>0.532</td>\n",
       "      <td>0.366</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0.431</td>\n",
       "      <td>-0.245</td>\n",
       "      <td>0.940</td>\n",
       "      <td>-0.336</td>\n",
       "      <td>1.131</td>\n",
       "      <td>0.690</td>\n",
       "      <td>0.584</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0.859</td>\n",
       "      <td>2.641</td>\n",
       "      <td>-0.383</td>\n",
       "      <td>-0.874</td>\n",
       "      <td>1.057</td>\n",
       "      <td>0.827</td>\n",
       "      <td>-0.038</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>0.509</td>\n",
       "      <td>2.369</td>\n",
       "      <td>-0.295</td>\n",
       "      <td>-1.153</td>\n",
       "      <td>0.866</td>\n",
       "      <td>0.923</td>\n",
       "      <td>-0.555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0.392</td>\n",
       "      <td>1.879</td>\n",
       "      <td>-0.188</td>\n",
       "      <td>-1.165</td>\n",
       "      <td>0.701</td>\n",
       "      <td>0.972</td>\n",
       "      <td>-0.396</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>0.004</td>\n",
       "      <td>1.007</td>\n",
       "      <td>-0.196</td>\n",
       "      <td>-1.018</td>\n",
       "      <td>0.678</td>\n",
       "      <td>1.031</td>\n",
       "      <td>-0.601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0.315</td>\n",
       "      <td>0.572</td>\n",
       "      <td>0.705</td>\n",
       "      <td>-1.058</td>\n",
       "      <td>0.641</td>\n",
       "      <td>1.082</td>\n",
       "      <td>-0.923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0.081</td>\n",
       "      <td>0.354</td>\n",
       "      <td>-0.907</td>\n",
       "      <td>-0.736</td>\n",
       "      <td>0.703</td>\n",
       "      <td>1.124</td>\n",
       "      <td>-1.268</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>-0.735</td>\n",
       "      <td>-0.027</td>\n",
       "      <td>-0.313</td>\n",
       "      <td>-0.540</td>\n",
       "      <td>0.836</td>\n",
       "      <td>1.163</td>\n",
       "      <td>-1.671</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>-0.851</td>\n",
       "      <td>-0.191</td>\n",
       "      <td>0.269</td>\n",
       "      <td>-0.507</td>\n",
       "      <td>0.981</td>\n",
       "      <td>1.204</td>\n",
       "      <td>-1.743</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>-0.735</td>\n",
       "      <td>-0.953</td>\n",
       "      <td>0.968</td>\n",
       "      <td>-0.430</td>\n",
       "      <td>1.142</td>\n",
       "      <td>1.243</td>\n",
       "      <td>-1.740</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>-0.618</td>\n",
       "      <td>-1.225</td>\n",
       "      <td>0.405</td>\n",
       "      <td>-0.439</td>\n",
       "      <td>1.367</td>\n",
       "      <td>1.290</td>\n",
       "      <td>-1.968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>-0.463</td>\n",
       "      <td>-1.715</td>\n",
       "      <td>1.772</td>\n",
       "      <td>-0.149</td>\n",
       "      <td>1.658</td>\n",
       "      <td>1.347</td>\n",
       "      <td>-2.302</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    ALHOWN   ALUR  ALINCOME  ALPERMITS  ALHPINDEX  ALPOP  PCRIMER\n",
       "0   -2.095  0.572    -1.963     -0.820     -1.599 -1.716    0.418\n",
       "1   -1.667  0.463    -1.726     -1.011     -1.567 -1.693    0.487\n",
       "2   -1.357  0.354    -1.230     -0.867     -1.523 -1.630    0.835\n",
       "3   -0.774  0.681    -1.164     -1.146     -1.444 -1.483    1.479\n",
       "4   -0.618  0.790    -0.773     -0.688     -1.341 -1.316    1.223\n",
       "5   -0.657  0.681    -1.387     -0.398     -1.227 -1.129    0.613\n",
       "6   -1.318  0.027    -0.692      0.263     -1.126 -0.991    0.861\n",
       "7   -0.696 -0.082    -1.485      0.463     -1.009 -0.888    0.853\n",
       "8   -0.346 -0.517     0.018      0.647     -0.887 -0.792    0.933\n",
       "9   -0.230 -0.626     0.417      0.236     -0.770 -0.689    1.077\n",
       "10   0.392 -0.953     1.979      0.520     -0.604 -0.582    0.586\n",
       "11   1.131 -0.790     1.670      0.431     -0.516 -0.517    0.252\n",
       "12   0.509 -0.844     0.888      0.374     -0.429 -0.232    0.534\n",
       "13   0.509 -0.572     0.418      0.330     -0.230 -0.178    0.159\n",
       "14   0.703 -0.136     1.105      0.891     -0.119 -0.135    0.468\n",
       "15   1.675 -0.082     0.678      1.300      0.036 -0.054    0.507\n",
       "16   2.374 -0.245     0.113      2.081      0.191  0.040    0.472\n",
       "17   1.830 -0.899    -0.128      2.372      0.488  0.176    0.207\n",
       "18   0.898 -1.116    -0.259      2.271      0.844  0.381    0.291\n",
       "19   0.548 -1.171     0.745      1.157      1.075  0.532    0.366\n",
       "20   0.431 -0.245     0.940     -0.336      1.131  0.690    0.584\n",
       "21   0.859  2.641    -0.383     -0.874      1.057  0.827   -0.038\n",
       "22   0.509  2.369    -0.295     -1.153      0.866  0.923   -0.555\n",
       "23   0.392  1.879    -0.188     -1.165      0.701  0.972   -0.396\n",
       "24   0.004  1.007    -0.196     -1.018      0.678  1.031   -0.601\n",
       "25   0.315  0.572     0.705     -1.058      0.641  1.082   -0.923\n",
       "26   0.081  0.354    -0.907     -0.736      0.703  1.124   -1.268\n",
       "27  -0.735 -0.027    -0.313     -0.540      0.836  1.163   -1.671\n",
       "28  -0.851 -0.191     0.269     -0.507      0.981  1.204   -1.743\n",
       "29  -0.735 -0.953     0.968     -0.430      1.142  1.243   -1.740\n",
       "30  -0.618 -1.225     0.405     -0.439      1.367  1.290   -1.968\n",
       "31  -0.463 -1.715     1.772     -0.149      1.658  1.347   -2.302"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def standardScaler(data):\n",
    "    scaled_df = (data-np.mean(data, axis=0)) /np.std(data, axis=0)\n",
    "    return scaled_df\n",
    "\n",
    "scaled_df = standardScaler (alabama_df)\n",
    "scaled_df = np.around(scaled_df, 3)\n",
    "scaled_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Computing Covariance Matrix\n",
    "- Tells us the linear relationship all the attributes (which direction they move in)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ALHOWN</th>\n",
       "      <th>ALUR</th>\n",
       "      <th>ALINCOME</th>\n",
       "      <th>ALPERMITS</th>\n",
       "      <th>ALHPINDEX</th>\n",
       "      <th>ALPOP</th>\n",
       "      <th>PCRIMER</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>ALHOWN</th>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.091</td>\n",
       "      <td>0.514</td>\n",
       "      <td>0.630</td>\n",
       "      <td>0.420</td>\n",
       "      <td>0.363</td>\n",
       "      <td>0.070</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALUR</th>\n",
       "      <td>-0.091</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.521</td>\n",
       "      <td>-0.599</td>\n",
       "      <td>-0.122</td>\n",
       "      <td>-0.046</td>\n",
       "      <td>0.125</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALINCOME</th>\n",
       "      <td>0.514</td>\n",
       "      <td>-0.521</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.320</td>\n",
       "      <td>0.517</td>\n",
       "      <td>0.487</td>\n",
       "      <td>-0.296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALPERMITS</th>\n",
       "      <td>0.630</td>\n",
       "      <td>-0.599</td>\n",
       "      <td>0.320</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.074</td>\n",
       "      <td>-0.042</td>\n",
       "      <td>0.270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALHPINDEX</th>\n",
       "      <td>0.420</td>\n",
       "      <td>-0.122</td>\n",
       "      <td>0.517</td>\n",
       "      <td>0.074</td>\n",
       "      <td>1.000</td>\n",
       "      <td>0.971</td>\n",
       "      <td>-0.760</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ALPOP</th>\n",
       "      <td>0.363</td>\n",
       "      <td>-0.046</td>\n",
       "      <td>0.487</td>\n",
       "      <td>-0.042</td>\n",
       "      <td>0.971</td>\n",
       "      <td>1.000</td>\n",
       "      <td>-0.821</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PCRIMER</th>\n",
       "      <td>0.070</td>\n",
       "      <td>0.125</td>\n",
       "      <td>-0.296</td>\n",
       "      <td>0.270</td>\n",
       "      <td>-0.760</td>\n",
       "      <td>-0.821</td>\n",
       "      <td>1.000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           ALHOWN   ALUR  ALINCOME  ALPERMITS  ALHPINDEX  ALPOP  PCRIMER\n",
       "ALHOWN      1.000 -0.091     0.514      0.630      0.420  0.363    0.070\n",
       "ALUR       -0.091  1.000    -0.521     -0.599     -0.122 -0.046    0.125\n",
       "ALINCOME    0.514 -0.521     1.000      0.320      0.517  0.487   -0.296\n",
       "ALPERMITS   0.630 -0.599     0.320      1.000      0.074 -0.042    0.270\n",
       "ALHPINDEX   0.420 -0.122     0.517      0.074      1.000  0.971   -0.760\n",
       "ALPOP       0.363 -0.046     0.487     -0.042      0.971  1.000   -0.821\n",
       "PCRIMER     0.070  0.125    -0.296      0.270     -0.760 -0.821    1.000"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "def computeCovarianceMatrix(data):\n",
    "    len_data = data.shape[0]\n",
    "    covariance = data.T.dot(data)/len_data\n",
    "    return covariance \n",
    "\n",
    "cov_mat = computeCovarianceMatrix(scaled_df)\n",
    "cov_mat = np.around(cov_mat, 3)\n",
    "cov_mat"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 218,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1152x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#plot covariance Matrix as a Heatmap\n",
    "fig=plt.figure(figsize=(16,7))\n",
    "\n",
    "#annotate each cell with the numeric value using integer formatting\n",
    "sn.heatmap(cov_mat, annot=True, fmt ='g', linewidth =.1, cmap='YlGnBu')\n",
    "plt.show()\n",
    "# looking at the heatmap, the variances are 1 so you can infer that they is a higher correlation in the attributes. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Step 4. Eigen Decomposition of Covariance Matrix\n",
    "- PC = $\\beta_1 X_i + \\beta_2 X_2 +...+ \\beta_n X_n$\n",
    "- Original Variables: ALHOWN , ALUR, ALINCOME, ALPINDEX, ALPOP\n",
    "- first row is what generates the first PC\n",
    "    - PC1 = (ALHOWN * -0.309445\t) + (ALUR * 0.209059) + ....+(PCRIMER * 0.388833)\n",
    "    - same for PC2 and the other PC's"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Number of Eigenvectors: 7 \n",
      "\n",
      "Eigenvectors: \n",
      "\n",
      "[[-0.30944518  0.36590398 -0.61420352 -0.04757527 -0.39237029 -0.48073437\n",
      "  -0.07608296]\n",
      " [ 0.20905932 -0.4043414  -0.70235405 -0.11874564 -0.0689693   0.52860259\n",
      "  -0.03497196]\n",
      " [-0.41501076  0.22841605  0.14294915 -0.79622977 -0.00991793  0.34763551\n",
      "  -0.01506828]\n",
      " [-0.16071621  0.61182817 -0.04881084  0.50373909 -0.01366272  0.58242428\n",
      "   0.06554634]\n",
      " [-0.51187988 -0.19159515 -0.11666294  0.18348261  0.53670334 -0.02785593\n",
      "  -0.60429112]\n",
      " [-0.49926179 -0.26731843 -0.1164588   0.12178538  0.22794173 -0.05358554\n",
      "   0.77204621]\n",
      " [ 0.38883275  0.40981321 -0.28189178 -0.21772368  0.70781061 -0.16049273\n",
      "   0.16505111]]\n",
      "\n",
      "Eigenvalues: \n",
      "\n",
      "[3.27049727 2.06813004 1.00710864 0.47599862 0.10728238 0.05327431\n",
      " 0.01770874]\n"
     ]
    }
   ],
   "source": [
    "# import eig from numpy.linalg\n",
    "eig_values, eig_vectors = np.linalg.eig(cov_mat)\n",
    "print ('\\nNumber of Eigenvectors: %s ' %len(eig_vectors))\n",
    "print ('\\nEigenvectors: \\n\\n%s' %eig_vectors)\n",
    "print ('\\nEigenvalues: \\n\\n%s' %eig_values)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>eigvec_1</th>\n",
       "      <td>-0.309445</td>\n",
       "      <td>0.209059</td>\n",
       "      <td>-0.415011</td>\n",
       "      <td>-0.160716</td>\n",
       "      <td>-0.511880</td>\n",
       "      <td>-0.499262</td>\n",
       "      <td>0.388833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eigvec_2</th>\n",
       "      <td>0.365904</td>\n",
       "      <td>-0.404341</td>\n",
       "      <td>0.228416</td>\n",
       "      <td>0.611828</td>\n",
       "      <td>-0.191595</td>\n",
       "      <td>-0.267318</td>\n",
       "      <td>0.409813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eigvec_3</th>\n",
       "      <td>-0.614204</td>\n",
       "      <td>-0.702354</td>\n",
       "      <td>0.142949</td>\n",
       "      <td>-0.048811</td>\n",
       "      <td>-0.116663</td>\n",
       "      <td>-0.116459</td>\n",
       "      <td>-0.281892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eigvec_4</th>\n",
       "      <td>-0.047575</td>\n",
       "      <td>-0.118746</td>\n",
       "      <td>-0.796230</td>\n",
       "      <td>0.503739</td>\n",
       "      <td>0.183483</td>\n",
       "      <td>0.121785</td>\n",
       "      <td>-0.217724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eigvec_5</th>\n",
       "      <td>-0.392370</td>\n",
       "      <td>-0.068969</td>\n",
       "      <td>-0.009918</td>\n",
       "      <td>-0.013663</td>\n",
       "      <td>0.536703</td>\n",
       "      <td>0.227942</td>\n",
       "      <td>0.707811</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eigvec_6</th>\n",
       "      <td>-0.480734</td>\n",
       "      <td>0.528603</td>\n",
       "      <td>0.347636</td>\n",
       "      <td>0.582424</td>\n",
       "      <td>-0.027856</td>\n",
       "      <td>-0.053586</td>\n",
       "      <td>-0.160493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>eigvec_7</th>\n",
       "      <td>-0.076083</td>\n",
       "      <td>-0.034972</td>\n",
       "      <td>-0.015068</td>\n",
       "      <td>0.065546</td>\n",
       "      <td>-0.604291</td>\n",
       "      <td>0.772046</td>\n",
       "      <td>0.165051</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 0         1         2         3         4         5         6\n",
       "eigvec_1 -0.309445  0.209059 -0.415011 -0.160716 -0.511880 -0.499262  0.388833\n",
       "eigvec_2  0.365904 -0.404341  0.228416  0.611828 -0.191595 -0.267318  0.409813\n",
       "eigvec_3 -0.614204 -0.702354  0.142949 -0.048811 -0.116663 -0.116459 -0.281892\n",
       "eigvec_4 -0.047575 -0.118746 -0.796230  0.503739  0.183483  0.121785 -0.217724\n",
       "eigvec_5 -0.392370 -0.068969 -0.009918 -0.013663  0.536703  0.227942  0.707811\n",
       "eigvec_6 -0.480734  0.528603  0.347636  0.582424 -0.027856 -0.053586 -0.160493\n",
       "eigvec_7 -0.076083 -0.034972 -0.015068  0.065546 -0.604291  0.772046  0.165051"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# convert the above data into a pandas data frame\n",
    "eigenvec_df = pd.DataFrame(eig_vectors)\n",
    "eigenvec_df.columns=['eigvec_'+str(i+1) for i in range (0, len(eig_vectors))]\n",
    "eigenvec_df.T"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 5. Putting Eigenvalues in Decending Order"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Sorted Eigen-pairs (descending order):\n",
      "\n",
      "eigenvec_1 : 3.27\n",
      "eigenvec_2 : 2.068\n",
      "eigenvec_3 : 1.007\n",
      "eigenvec_4 : 0.476\n",
      "eigenvec_5 : 0.107\n",
      "eigenvec_6 : 0.053\n",
      "eigenvec_7 : 0.018\n",
      "\n",
      "Total Variance or sum of all eigenvalues: 6.999\n"
     ]
    }
   ],
   "source": [
    "indexes = eig_values.argsort()[::-1]\n",
    "eig_values = eig_values[indexes]\n",
    "eig_vectors = eig_vectors[:, indexes]\n",
    "sorted_eig_pairs =[(np.around(np.abs(eig_values[i]),3), eig_vectors[:,i])for i in range(len(eig_values))] \n",
    "print('\\nSorted Eigen-pairs (descending order):\\n')\n",
    "\n",
    "sorted_eigenValues = []\n",
    "for i in range(0, len(sorted_eig_pairs)):\n",
    "    print(\"eigenvec_{0} : {1}\".format(str(i+1), str(sorted_eig_pairs[i][0])))\n",
    "    sorted_eigenValues.append(sorted_eig_pairs[i][0])\n",
    "                   \n",
    "print (\"\\nTotal Variance or sum of all eigenvalues:\", round (sum(sorted_eigenValues),3))                   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 6. What is the value of \"k\" best eigenvectors\n",
    "- Using the Kaiser Stooping rule, I choose the PC's that has an eigenvalue greater than 1\n",
    "- I will be using the Cummulative Variance plot since I only got one for the other method\n",
    "    -By computing this we notice that 3 and 4 have the highest variance so the would be the best option since they capture enough variance in our data set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 222,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "According to Kaiser's stopping Rule:\n",
      "Number of PCs to be considered for PCA is: 3\n",
      "Thier Eigenvalues are: [3.27, 2.068, 1.007]\n",
      "\n",
      "cummulative_variance Percentage:\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "{'1': 46.721,\n",
       " '2': 76.268,\n",
       " '3': 90.656,\n",
       " '4': 97.457,\n",
       " '5': 98.986,\n",
       " '6': 99.743,\n",
       " '7': 100.0}"
      ]
     },
     "execution_count": 222,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Using the Kaiser Stopping rule \n",
    "best_eig_pairs = [sorted_eig_pairs[i][0] for i in range(0, len(sorted_eig_pairs)) if sorted_eig_pairs[i][0]>1.0] \n",
    "print (\"\\nAccording to Kaiser's stopping Rule:\")\n",
    "print (\"Number of PCs to be considered for PCA is: {}\".format(str(len(best_eig_pairs))))\n",
    "print (\"Thier Eigenvalues are: {}\".format(str(best_eig_pairs)))\n",
    "\n",
    "#using the coomulative variance method\n",
    "cumulative_variance = {}\n",
    "ith_cumulative_variance=0\n",
    "for i in range(0, len(sorted_eig_pairs)):\n",
    "    ith_explained_variance= sorted_eig_pairs[i][0]/sum(sorted_eigenValues)\n",
    "    ith_cumulative_variance+= ith_explained_variance\n",
    "    cumulative_variance[str(i+1)]= round(ith_cumulative_variance*100,3)\n",
    "print(\"\\ncummulative_variance Percentage:\")\n",
    "cumulative_variance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 7. Constructing my projection matrix\n",
    "- the PC shows an axis for the new feature space\n",
    "- the dataframe still has the same variables (ALHOWN, ALUR, ALINCOME, ALPERMITS, ALHPINDEX, ALPOP, PCRIMER)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 223,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Projection-Matrix Dimension... (4, 7)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([[-0.30944518,  0.20905932, -0.41501076, -0.16071621, -0.51187988,\n",
       "        -0.49926179,  0.38883275],\n",
       "       [ 0.36590398, -0.4043414 ,  0.22841605,  0.61182817, -0.19159515,\n",
       "        -0.26731843,  0.40981321],\n",
       "       [-0.61420352, -0.70235405,  0.14294915, -0.04881084, -0.11666294,\n",
       "        -0.1164588 , -0.28189178],\n",
       "       [-0.04757527, -0.11874564, -0.79622977,  0.50373909,  0.18348261,\n",
       "         0.12178538, -0.21772368]])"
      ]
     },
     "execution_count": 223,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "k = 4\n",
    "projection_matrix = np.array([list(np.hstack(i[1].reshape(7,1))) for i in sorted_eig_pairs[:]])\n",
    "projection_matrix = projection_matrix[:k]\n",
    "print(\"\\nProjection-Matrix Dimension...\", projection_matrix.shape)\n",
    "projection_matrix\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 228,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>PC1</th>\n",
       "      <td>-0.309445</td>\n",
       "      <td>0.209059</td>\n",
       "      <td>-0.415011</td>\n",
       "      <td>-0.160716</td>\n",
       "      <td>-0.511880</td>\n",
       "      <td>-0.499262</td>\n",
       "      <td>0.388833</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC2</th>\n",
       "      <td>0.365904</td>\n",
       "      <td>-0.404341</td>\n",
       "      <td>0.228416</td>\n",
       "      <td>0.611828</td>\n",
       "      <td>-0.191595</td>\n",
       "      <td>-0.267318</td>\n",
       "      <td>0.409813</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC3</th>\n",
       "      <td>-0.614204</td>\n",
       "      <td>-0.702354</td>\n",
       "      <td>0.142949</td>\n",
       "      <td>-0.048811</td>\n",
       "      <td>-0.116663</td>\n",
       "      <td>-0.116459</td>\n",
       "      <td>-0.281892</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>PC4</th>\n",
       "      <td>-0.047575</td>\n",
       "      <td>-0.118746</td>\n",
       "      <td>-0.796230</td>\n",
       "      <td>0.503739</td>\n",
       "      <td>0.183483</td>\n",
       "      <td>0.121785</td>\n",
       "      <td>-0.217724</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            1         2         3         4         5         6         7\n",
       "PC1 -0.309445  0.209059 -0.415011 -0.160716 -0.511880 -0.499262  0.388833\n",
       "PC2  0.365904 -0.404341  0.228416  0.611828 -0.191595 -0.267318  0.409813\n",
       "PC3 -0.614204 -0.702354  0.142949 -0.048811 -0.116663 -0.116459 -0.281892\n",
       "PC4 -0.047575 -0.118746 -0.796230  0.503739  0.183483  0.121785 -0.217724"
      ]
     },
     "execution_count": 228,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Putting the projection matrix into a new dataframe to understand\n",
    "projection_matrix_df = pd.DataFrame(projection_matrix)\n",
    "projection_matrix_df.columns = [str(i+1) for i in range(0, len(eig_vectors))]\n",
    "projection_matrix_df = projection_matrix_df.set_index([pd.Index(['PC1','PC2','PC3','PC4'])])\n",
    "projection_matrix_df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 9. Transforming original dataset to new feature space\n",
    "- remember by multiplying the feature matrix with the original dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 230,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PC1</th>\n",
       "      <th>PC2</th>\n",
       "      <th>PC3</th>\n",
       "      <th>PC4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3.552084</td>\n",
       "      <td>-1.011551</td>\n",
       "      <td>0.912982</td>\n",
       "      <td>0.588300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3.328160</td>\n",
       "      <td>-0.857598</td>\n",
       "      <td>0.743999</td>\n",
       "      <td>0.289610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3.061793</td>\n",
       "      <td>-0.381353</td>\n",
       "      <td>0.583458</td>\n",
       "      <td>-0.094609</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3.103777</td>\n",
       "      <td>-0.246387</td>\n",
       "      <td>-0.189113</td>\n",
       "      <td>-0.462086</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2.606772</td>\n",
       "      <td>-0.033140</td>\n",
       "      <td>-0.287249</td>\n",
       "      <td>-0.468090</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2.415357</td>\n",
       "      <td>-0.287971</td>\n",
       "      <td>-0.151787</td>\n",
       "      <td>0.358180</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>2.064343</td>\n",
       "      <td>0.343166</td>\n",
       "      <td>0.682863</td>\n",
       "      <td>0.228222</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>2.031616</td>\n",
       "      <td>0.502834</td>\n",
       "      <td>0.230874</td>\n",
       "      <td>0.979484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1.099765</td>\n",
       "      <td>1.246423</td>\n",
       "      <td>0.479334</td>\n",
       "      <td>-0.072900</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0.886225</td>\n",
       "      <td>1.181680</td>\n",
       "      <td>0.495504</td>\n",
       "      <td>-0.587548</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>-0.397813</td>\n",
       "      <td>1.810411</td>\n",
       "      <td>0.659145</td>\n",
       "      <td>-1.528568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>-0.657242</td>\n",
       "      <td>1.718760</td>\n",
       "      <td>0.127254</td>\n",
       "      <td>-1.285097</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>-0.219529</td>\n",
       "      <td>1.322219</td>\n",
       "      <td>0.315377</td>\n",
       "      <td>-0.665881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>-0.235175</td>\n",
       "      <td>0.871719</td>\n",
       "      <td>0.135503</td>\n",
       "      <td>-0.221380</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>-0.537469</td>\n",
       "      <td>1.360440</td>\n",
       "      <td>-0.324117</td>\n",
       "      <td>-0.588469</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>-0.820101</td>\n",
       "      <td>1.811601</td>\n",
       "      <td>-1.078563</td>\n",
       "      <td>-0.065291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>-1.101399</td>\n",
       "      <td>2.412890</td>\n",
       "      <td>-1.531458</td>\n",
       "      <td>0.811607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>-1.339506</td>\n",
       "      <td>2.399411</td>\n",
       "      <td>-0.762433</td>\n",
       "      <td>1.382381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>-1.277786</td>\n",
       "      <td>1.965830</td>\n",
       "      <td>-0.140466</td>\n",
       "      <td>1.577914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>-1.583081</td>\n",
       "      <td>1.353868</td>\n",
       "      <td>0.245355</td>\n",
       "      <td>0.284962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>-1.217048</td>\n",
       "      <td>0.104092</td>\n",
       "      <td>-0.318799</td>\n",
       "      <td>-0.744724</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>-0.382995</td>\n",
       "      <td>-1.814937</td>\n",
       "      <td>-2.603519</td>\n",
       "      <td>-0.186855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>-0.474421</td>\n",
       "      <td>-2.184563</td>\n",
       "      <td>-2.014469</td>\n",
       "      <td>-0.259307</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>-0.461312</td>\n",
       "      <td>-1.928473</td>\n",
       "      <td>-1.613850</td>\n",
       "      <td>-0.345722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>-0.641246</td>\n",
       "      <td>-1.725123</td>\n",
       "      <td>-0.717805</td>\n",
       "      <td>-0.095699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>-1.327647</td>\n",
       "      <td>-1.392613</td>\n",
       "      <td>-0.383403</td>\n",
       "      <td>-0.726864</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>-0.870418</td>\n",
       "      <td>-1.725778</td>\n",
       "      <td>-0.247589</td>\n",
       "      <td>0.847488</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>-1.219830</td>\n",
       "      <td>-1.815766</td>\n",
       "      <td>0.690087</td>\n",
       "      <td>0.674219</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>-1.587748</td>\n",
       "      <td>-1.707019</td>\n",
       "      <td>0.956712</td>\n",
       "      <td>0.299704</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>-2.186132</td>\n",
       "      <td>-1.189735</td>\n",
       "      <td>1.492651</td>\n",
       "      <td>-0.099470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>-2.271396</td>\n",
       "      <td>-1.320158</td>\n",
       "      <td>1.564337</td>\n",
       "      <td>0.467654</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>-3.343011</td>\n",
       "      <td>-0.783510</td>\n",
       "      <td>2.048110</td>\n",
       "      <td>-0.290841</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         PC1       PC2       PC3       PC4\n",
       "0   3.552084 -1.011551  0.912982  0.588300\n",
       "1   3.328160 -0.857598  0.743999  0.289610\n",
       "2   3.061793 -0.381353  0.583458 -0.094609\n",
       "3   3.103777 -0.246387 -0.189113 -0.462086\n",
       "4   2.606772 -0.033140 -0.287249 -0.468090\n",
       "5   2.415357 -0.287971 -0.151787  0.358180\n",
       "6   2.064343  0.343166  0.682863  0.228222\n",
       "7   2.031616  0.502834  0.230874  0.979484\n",
       "8   1.099765  1.246423  0.479334 -0.072900\n",
       "9   0.886225  1.181680  0.495504 -0.587548\n",
       "10 -0.397813  1.810411  0.659145 -1.528568\n",
       "11 -0.657242  1.718760  0.127254 -1.285097\n",
       "12 -0.219529  1.322219  0.315377 -0.665881\n",
       "13 -0.235175  0.871719  0.135503 -0.221380\n",
       "14 -0.537469  1.360440 -0.324117 -0.588469\n",
       "15 -0.820101  1.811601 -1.078563 -0.065291\n",
       "16 -1.101399  2.412890 -1.531458  0.811607\n",
       "17 -1.339506  2.399411 -0.762433  1.382381\n",
       "18 -1.277786  1.965830 -0.140466  1.577914\n",
       "19 -1.583081  1.353868  0.245355  0.284962\n",
       "20 -1.217048  0.104092 -0.318799 -0.744724\n",
       "21 -0.382995 -1.814937 -2.603519 -0.186855\n",
       "22 -0.474421 -2.184563 -2.014469 -0.259307\n",
       "23 -0.461312 -1.928473 -1.613850 -0.345722\n",
       "24 -0.641246 -1.725123 -0.717805 -0.095699\n",
       "25 -1.327647 -1.392613 -0.383403 -0.726864\n",
       "26 -0.870418 -1.725778 -0.247589  0.847488\n",
       "27 -1.219830 -1.815766  0.690087  0.674219\n",
       "28 -1.587748 -1.707019  0.956712  0.299704\n",
       "29 -2.186132 -1.189735  1.492651 -0.099470\n",
       "30 -2.271396 -1.320158  1.564337  0.467654\n",
       "31 -3.343011 -0.783510  2.048110 -0.290841"
      ]
     },
     "execution_count": 230,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaled_df.shape\n",
    "transformedData = (scaled_df).dot(projection_matrix.T)\n",
    "transformedData.columns = ['PC'+str(i+1) for i in range (0,k)]\n",
    "transformedData"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Now we can interpret what our PC are by looking at the projection matrix before.\n",
    "- looking at the new data dram above (projection matrix), you can tell which PC is what by looking at the highest numbers\n",
    "- PC1 is 7 (PCRIMER)\n",
    "- PC2 is 4 (ALPERMITS) and so on\n",
    "- from here you can use your new data set to analyze, see patterns, time series prediction and many more. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Sources "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- https://fred.stlouisfed.org/\n",
    "\n",
    "- https://www.youtube.com\n",
    "\n",
    "- https://stackoverflow.com/"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 10 Things I Learned From Other Students' Presentations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. How to change color and characteristics of a picture using python. For instance, if I want to read an image, I can use a method such as cv2.imread(). \n",
    "\n",
    "\n",
    "2. A Fourier transforms decomposes images into sine and cosine components. I also shows that any wave form can be re-written as the sum of sinusoidal function. \n",
    "\n",
    "\n",
    "3. Linear Regression is a pedictive analytics technique that is uses historical data to predict an output variable. The mean squared function is used to help find the errors when doing Linear Regression.\n",
    "\n",
    "\n",
    "4. Insertion sort is a simple argorithm that sorts the array one item at a time.There are many methos for sorting Algorithms such is Quicksort, Insertion sort, selected sort etc.\n",
    "\n",
    "\n",
    "5. What a Random walk is and how it relates to the stock market. A Random walk theory suggest that changes in stock prices have the same distribution and are independent to each other.\n",
    "\n",
    "\n",
    "6. Black Scholes Option Pricing model is used to determine fair value for a call. It calculates the theoretical value of options using current stock prices, expected interest rates, time to expiration, and expected volatility. \n",
    "\n",
    "\n",
    "7. A time complexity of insertion which is longer on average takes to comeplete is n^2. \n",
    "\n",
    "\n",
    "8. Insertion sort begin with the second element in the array and compares it to the value of the left of it. If the element is greater than the value to the left then nothing happens.\n",
    "\n",
    "\n",
    "9.  Fourier transformation can be used in application such as image analysis, filtering, reconstruction and compression.\n",
    "\n",
    "\n",
    "10.  A game where you guess a number and it generates a a random number. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
